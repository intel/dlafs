
0. Install packages
-------------------
sudo apt-get install libusb-1.0-0-dev libudev-dev libssl-dev rpm cmake libboost-program-options1.58-dev libboost-thread1.58 libboost-filesystem1.58 git libelf-dev dkms libssl-dev
sudo apt-get install gstreamer1.0-plugins-base gstreamer1.0-plugins-good gstreamer1.0-plugins-ugly gstreamer1.0-plugins-bad libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev
sudo apt-get install libeigen3-dev  libopenblas-dev liblapack-dev libdlib-dev
sudo apt-get install  libdrm-dev libudev-dev libgstreamer-plugins-bad1.0-dev libx11-xcb-dev libgles2-mesa-dev libgl1-mesa-dev libgtk2.0-dev pkg-config libgtkglext1-dev
sudo ln -sf /opt/intel/mediasdk/lib64/libva.so.2 /usr/lib/libva.so
sudo ln -sf /opt/intel/mediasdk/lib64/libva-drm.so.2 /usr/lib/libva-drm.so

1. Install OpenVINO R5
Install OpenVINO: https://software.intel.com/en-us/articles/OpenVINO-Install-Linux

source /opt/intel/computer_vision_sdk/bin/setupvars.sh

2. Install OpenCL
-----------------
cd /opt/intel/computer_vision_sdk/install_dependencies
sudo ./install_NEO_OCL_driver.sh

Add OpenCL users to the video group: 
sudo usermod -a -G video USERNAME
   e.g. if the user running OpenCL host applications is foo, run: sudo usermod -a -G video foo

Install 4.14 kernel using install_4_14_kernel.sh script and reboot into this kernel
sudo ./install_4_14_kernel.sh

If you use 8th Generation Intel processor, you will need to add:
   i915.alpha_support=1
   to the 4.14 kernel command line, in order to enable OpenCL functionality for this platform.

3. Install OpenCL SDK
---------------------
tar -xvf intel_sdk_for_opencl_2017_7.0.0.2568_x64.gz
cd intel_sdk_for_opencl_2017_7.0.0.2568_x64
./install_GUI.sh

4. Install HDDL-R
-----------------
Install json-c
git clone https://github.com/json-c/json-c.git
cd json-c
git checkout f8c632f579c71012f9aca81543b880a579f634fc
sudo apt-get install autoconf libtool
sh autogen.sh
./configure && make && sudo make install

Install HDDL rpm package:
sudo rpm -ivh --nodeps Intel_Movidius_MyriadX_HDDL-R_Linux-xxx.rpm
export HDDL_INSTALL_DIR=/usr/local
export LD_LIBRARY_PATH=/usr/local/lib
sudo usermod -a -G users,video $USER

5. Install uWebSocket
---------------------
sudo apt-get install libssl-dev
git clone https://github.com/uNetworking/uWebSockets.git
make && sudo make install

6. Install OpenCV
-----------------
export CPLUS_INCLUDE_PATH=/opt/intel/mediasdk/include:$CPLUS_INCLUDE_PATH
git clone https://github.com/opencv/opencv.git
cd opencv && git checkout 6ffc48769ac60d53c4bd1913eac15117c9b1c9f7
mkdir build && cd build
cmake -DWITH_VA_INTEL=ON -DWITH_CUDA=OFF ..
make -j8
sudo make install
Note: OpenVINO has provided OpenCV libraries, but HDDL-S need VA support in OpenCV, so we must rebuild it. 

7. Set enviroment variables
---------------------------
source /opt/intel/computer_vision_sdk/bin/setupvars.sh
export HDDL_INSTALL_DIR=/usr/local
export LD_LIBRARY_PATH=/usr/local/lib
export PKG_CONFIG_PATH=$PKG_CONFIG_PATH:/opt/intel/mediasdk/lib64/pkgconfig
export LD_LIBRARY_PATH=/opt/intel/mediasdk/lib64:/usr/local/lib:/opt/intel/computer_vision_sdk/inference_engine/lib/ubuntu_16.04/intel64:/opt/intel/computer_vision_sdk_2018.5.445/deployment_tools/inference_engine/external/omp/lib:/usr/lib/x86_64-linux-gnu/gstreamer-1.0:$LD_LIBRARY_PATH
export HDDLS_CVDL_KERNEL_PATH=/usr/lib/x86_64-linux-gnu/libgstcvdl/kernels
export PATH=$PATH:/opt/intel/mediasdk/bin/

8. Setup HDDL-S Server
----------------------
rpm -ivh --nodeps <HDDL-S rpm package>
sudo apt-get install nodejs-legacy npm
npm config set proxy <proxy>
sudo npm install -g n
sudo n stable
npm install ws@6.0.0
npm install child_process arraybuffer-to-string commander tree-kill colors fs path jsonwebtoken crypto

note: please run "npm audit fix --force" command to fix package audit issues.
      Need fixing packages: jsonwebtoken async-limiter buffer-equal-constant-time

9. generate certifiate files
    Please generate all these certificates in one pc!!!

(1) Prepare certificates
    -Generate a Certificate Authority:
      openssl req -new -x509 -days 9999 -keyout ca-key.pem -out ca-crt.pem

    -Insert a CA Password and remember it
    -Specify a CA Common Name, like 'root.localhost' or 'ca.localhost'. This MUST be different from both server and client CN.

(2) Server certificate
    -Generate Server Key:
       openssl genrsa -out server-key.pem 4096

    -Generate Server certificate signing request:
       openssl req -new -key server-key.pem -out server-csr.pem

    -Specify server Common Name, run    cat /etc/hosts    to check valid DNS name, please don't name as'localhost'.
    -For this example, do not insert the challenge password.

(3) Sign certificate using the CA:
       openssl x509 -req -days 9999 -in server-csr.pem -CA ca-crt.pem -CAkey ca-key.pem -CAcreateserial -out server-crt.pem

    -insert CA Password

(4) Verify server certificate:
       openssl verify -CAfile ca-crt.pem server-crt.pem

(5) Client certificate
    -Generate Client Key:
       openssl genrsa -out client1-key.pem 4096

    -Generate Client certificate signing request:
       openssl req -new -key client1-key.pem -out client1-csr.pem

    -Specify client Common Name, like 'client.localhost'. Server should not verify this, since it should not do reverse-dns lookup.
    -For this example, do not insert the challenge password.

(6) Sign certificate using the CA:
       openssl x509 -req -days 9999 -in client1-csr.pem -CA ca-crt.pem -CAkey ca-key.pem -CAcreateserial -out client1-crt.pem

    -insert CA Password
(7) Verify client certificate:
      openssl verify -CAfile ca-crt.pem client1-crt.pem

(8) After generated, please copy all file start with 'ca' and 'client' into 'cert_client_8126_8124', and copy all file start with 'ca' and 'server' into 'cert_server_8126_8124'.


10. Run HDDL-S Server

#cd s_framework/hddls_server_client/hddls_server
#export HDDLS_CVDL_MODEL_PATH=`pwd`/models
#./hddls_server.js

Note:
  1. How to deploy customer models
     Step 1: implement libxxxalgo.so as customer guide
     Step 2: copy model IR files into <HDDLS_CVDL_MODEL_PATH>/<model_name>
     Step 3: register this customer models
              command: registeralgo -a <model_name>
     Step 4: edit create_xxx.json and add <model_name> into algopipeline property
     Step 5: controller_client send create pipeline command with create_xxx.json

     For an example: see hddls_server/models/example
            run command: registeralgo -a example
  2. Dont't remove the files in hddls_server/models
     The hddlspipe will read models file from this directory.

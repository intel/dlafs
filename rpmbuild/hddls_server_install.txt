
0. Install packages
-------------------
	sudo apt-get install libusb-1.0-0-dev libudev-dev libssl-dev rpm cmake libboost-program-options1.58-dev libboost-thread1.58 libboost-filesystem1.58 git libelf-dev dkms libssl-dev
	sudo apt-get install gstreamer1.0-plugins-base gstreamer1.0-plugins-good gstreamer1.0-plugins-ugly gstreamer1.0-plugins-bad libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev
	sudo apt-get install libeigen3-dev  libopenblas-dev liblapack-dev libdlib-dev
	sudo ln -sf /opt/intel/mediasdk/lib64/libva.so.2 /usr/lib/libva.so
	sudo ln -sf /opt/intel/mediasdk/lib64/libva-drm.so.2 /usr/lib/libva-drm.so

1. Install OpenVINO R5
----------------------
Install OpenVINO: https://software.intel.com/en-us/articles/OpenVINO-Install-Linux

Note: below steps is the least
1) Install external software dependencies
2) Install the Intel Distribution of OpenVINO toolkit core components 
3) Set the environment variables
   source /opt/intel/computer_vision_sdk/bin/setupvars.sh
4) Additional installation steps for Intel Processor Graphics (GPU) 

   cd /opt/intel/computer_vision_sdk/install_dependencies
   sudo ./install_NEO_OCL_driver.sh

   Add OpenCL users to the video group: 
   sudo usermod -a -G video USERNAME
      e.g. if the user running OpenCL host applications is foo, run: sudo usermod -a -G video foo

   Install 4.14 kernel using install_4_14_kernel.sh script and reboot into this kernel
   sudo ./install_4_14_kernel.sh

   If you use 8th Generation Intel processor, you will need to add:
      i915.alpha_support=1
      to the 4.14 kernel command line, in order to enable OpenCL functionality for this platform.

5) Additional Installation Steps for Intel Vision Accelerator Design with Intel Movidius VPUs

2. Install OpenCL SDK
---------------------
	sudo apt-get install dkms
	tar -xvf intel_sdk_for_opencl_2017_7.0.0.2568_x64.gz
	cd intel_sdk_for_opencl_2017_7.0.0.2568_x64
	sudo ./install_GUI.sh

3. Install json-c
-----------------
	Install json-c
	sudo apt-get install git
	git clone https://github.com/json-c/json-c.git
	cd json-c
	git checkout f8c632f579c71012f9aca81543b880a579f634fc
	sudo apt-get install autoconf libtool
	sh autogen.sh
	./configure && make && sudo make install

4. Install uWebSocket
---------------------
	sudo apt-get install libssl-dev
	git clone https://github.com/uNetworking/uWebSockets.git
	cd uWebSocket && git checkout 1a126c8d4eb9127c2689ede9a8fdf8abcb62b981
	make && sudo make install

5. Install OpenCV
-----------------
	export CPLUS_INCLUDE_PATH=/opt/intel/mediasdk/include:$CPLUS_INCLUDE_PATH
	sudo ln -sf /opt/intel/opencl/SDK/include /opt/intel/opencl/include
	sudo ln -sf /opt/intel/mediasdk/include/va   /usr/local/include/va
	git clone https://github.com/opencv/opencv.git
	cd opencv && git checkout 6ffc48769ac60d53c4bd1913eac15117c9b1c9f7
	mkdir build && cd build
	cmake -DWITH_VA_INTEL=ON -DWITH_IPP=OFF -DWITH_CUDA=OFF ..
		Note: make sure:
			--     VA:                          YES
			--     Intel VA-API/OpenCL:         YES (OpenCL: /opt/intel/opencl)
		If either is NO, please try WA as below:
			sudo ln -sf /opt/intel/opencl/SDK/include /opt/intel/opencl/include
			sudo ln -sf /opt/intel/mediasdk/include/va   /usr/local/include/va
	make -j8
	sudo make install
	Note: OpenVINO has provided OpenCV libraries, but HDDL-S need VA support in OpenCV, so we must rebuild it. 

6. Set enviroment variables
---------------------------
	source /opt/intel/computer_vision_sdk/bin/setupvars.sh
	export LD_LIBRARY_PATH=/usr/local/lib:/opt/intel/computer_vision_sdk_2018.5.445/deployment_tools/inference_engine/external/hddl/lib:$LD_LIBRARY_PATH
	export PKG_CONFIG_PATH=$PKG_CONFIG_PATH:/opt/intel/mediasdk/lib64/pkgconfig
	export LD_LIBRARY_PATH=/opt/intel/mediasdk/lib64:/opt/intel/computer_vision_sdk/inference_engine/lib/ubuntu_16.04/intel64:/opt/intel/computer_vision_sdk_2018.5.445/deployment_tools/inference_engine/external/omp/lib:/usr/lib/x86_64-linux-gnu/gstreamer-1.0:$LD_LIBRARY_PATH
	export HDDLS_CVDL_KERNEL_PATH=/usr/lib/x86_64-linux-gnu/libgstcvdl/kernels
	export PATH=$PATH:/opt/intel/mediasdk/bin/


7. Setup HDDL-S Server
----------------------
	rpm -ivh --nodeps <HDDL-S rpm package>
	sudo apt-get install nodejs-legacy npm
	npm config set proxy <proxy>
	sudo npm install -g n
	sudo n stable
	cd hddls_server_controller_receiver
	npm install

8. Generate and install certifiate files
----------------------------------------
Step 1: 
	Please refer to certificate_create_explanation.md to generate certificate files.
Step 2: 
	Copy "ca-crt.pem client1-crt.pem client1-key.pem" into 'controller/cert_client'
	Copy "ca-crt.pem client1-crt.pem client1-key.pem" into 'receiver/cert_client'
	Copy "ca-crt.pem server-crt.pem server-key.pem" into 'server/cert_server'
	Copy 'client1.crl' into 'cert_server'
	Copy 'server.crl' into 'cert_client'

9. Run HDDL-S Server
---------------------
	cd hddls_server_controller_receiver/server
	export HDDLS_CVDL_MODEL_PATH=`pwd`/models
	node hddls-server.js

Note:
  1. How to deploy customer models
     Step 1: implement libxxxalgo.so as customer guide
     Step 2: copy model IR files into <HDDLS_CVDL_MODEL_PATH>/<model_name>
     Step 3: register this customer models
              command: registeralgo -a <model_name>
     Step 4: edit create_xxx.json and add <model_name> into algopipeline property
     Step 5: controller_client send create pipeline command with create_xxx.json

     For an example: see hddls_server/models/example
            run command: registeralgo -a example
  2. Dont't remove the files in hddls_server/models
     The hddlspipe will read models file from this directory.

  3. Maybe it will fail to run h265 video stream, it was caused by cannot find libmfx_hevcd_hw64.so in /opt/intel/mediasdk/lib64/mfx/
     It was mediasdk driver cfg issues.
     There is a WA:
            cd /opt/intel/mediasdk/lib64
            sudo ln -sf ../plugins mfx
  4. How to run SRTP streame source
     Step 1: Setup SRTP server as bolow:
	 		launch-1.0 filesrc location=./1600x1200_concat.264 ! h264parse ! rtph264pay ! 'application/x-rtp, payload=(int)96, ssrc=(uint)114879' ! srtpenc key="012345678901234567890123456789012345678901234567890123456789" ! udpsink host=10.239.67.158 port=5000
			Note: Host is for the receiver IP, you can run this command in any other machine
	 Step 2: Set json file at controller client
		Please refer: hddls_server_controller_receiver/controller/json_file/create_srtp.json	
	     
